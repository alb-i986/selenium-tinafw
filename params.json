{"name":"Selenium-tinafw","tagline":"A framework for writing maintainable poetry with Selenium WebDriver.","body":"selenium-tinafw\r\n===============\r\n\r\nA minimal and effective Selenium framework, not a wrapper.\r\n\r\nThe goal is two-fold:\r\n- helping manage the mess inherent in a large test suite, by providing a well-defined structure for test code (see [WebTask](http://alb-i986.github.io/selenium-tinafw/javadoc/me/alb_i986/selenium/tinafw/tasks/WebTask.html))\r\n- helping bootstrap a test suite by providing some basic services such as:\r\n  - a factory of WebDriver instances, representing either a local browser or one on a Grid, based on settings in a property file\r\n  - an automatic mechanism to close browsers as soon as a test terminates\r\n  - a mechanism to retry flaky tests\r\n  - test reports with screenshots attached\r\n\r\nIn order to get an idea of how tests look like by using this framework, please see the [sample provided](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/).\r\nStart from [SampleWebTest](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/tests/SampleWebTest.java), down to the WebTasks ([OnMyAboutMePage](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/tasks/OnMyAboutMePage.java), [Search](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/tasks/Search.java), [CanCompliment](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/tasks/CanCompliment.java)), down to page objects ([SearchResultsPage](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/ui/SearchResultsPage.java), [SearchResult](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/ui/SearchResult.java), etc.)\r\n\r\n\r\n## Usage\r\nPlease see the [Tutorial](https://github.com/alb-i986/selenium-tinafw/wiki/Try-it-out) on the wiki.\r\n\r\n\r\n## Features\r\n\r\n- Wraps without wrapping.\r\n  Selenium WebDriver's API is not hidden in any way.\r\n  You could virtually access a WebDriver instance from a test class (although you are encouraged not to do so, unless you want to break cohesion).\r\n  The idea is that _Selenium WebDriver has such a beautiful API that it's a shame to hide it_.\r\n\r\n- `WebTask` hierarchy, the orchestrators of page objects:\r\n  - helps keeping your code organized: each concrete WebTask is supposed to be a [Given/When/Then step](http://martinfowler.com/bliki/GivenWhenThen.html))\r\n  - and highly readable ([fluent interface](http://www.martinfowler.com/bliki/FluentInterface.html)): see e.g. [SampleWebTest](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/tests/SampleWebTest.java)\r\n  - solves the following problem in an elegant way:\r\n\r\n    > Given two tasks that run sequentially, the first does something and ends at a certain page.\r\n    > How can the second task know which was the last page the first task was visiting?\r\n  \r\n    (a naive solution being \"every task restarts navigating the SUT from the home page\").\r\n\r\n- `WebDriverFactory` hierarchy: elegant solution solving the problem of\r\n  creating instances of WebDriver, modeled using the decorator design pattern.\r\n\r\n- BDD-style tests are not only supported but also strongly encouraged.\r\n  You can write BDD tests by wrapping your own WebTask's in a `given` `when` or `then` task (each of which is a `CompositeWebTask`).\r\n  See also [WebTasks.BDD](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/tasks/WebTasks.java)\r\n  Please see [SampleWebTest](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/sample/tests/SampleWebTest.java)\r\n  for an example of usage.\r\n  For an introduction to BDD, please see the article [Introducing BDD, by Dan North](http://dannorth.net/introducing-bdd/).\r\n\r\n- HTML reports with embedded screenshots for each failing test, thanks to\r\n  [HtmlReporter](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/tests/rules/HtmlReporter.java)\r\n  \r\n- the ability to run each test on many different browsers (or just one)\r\n  by simply setting a property in a file: `tinafw.browsers = chrome, firefox`\r\n  \r\n- the ability to retry a failed test for a given number of times: see [TestRetrier](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/tests/rules/TestRetrier.java)\r\n  \r\n- an automatic mechanism for closing browsers as soon as a test finishes,\r\n  as well as the option to disable such a mechanism by setting a property: see [BrowserManager](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/tests/rules/BrowserManager.java)\r\n\r\n- a clean directory structure, aka multilayered architecture, with:\r\n  - the _tests_ layer, for keeping your test cases along with their data\r\n  - the _domain_ layer, containing concepts like User and Browser, and supposed to contain the concepts\r\n    of your own domain as well, e.g. `BlogPost`, `BlogComment`\r\n  - the _tasks_ layer, containing the orchestrators of page objects\r\n  - the _ui_ layer, with [page objects](https://code.google.com/p/selenium/wiki/PageObjects)\r\n\r\n- meaningful logs, e.g.:\r\n\r\n\t\tINFO  CompositeWebTask - BEGIN subtask Given\r\n\t\tINFO  CompositeWebTask - BEGIN subtask OnMyAboutMePage\r\n\t\tDEBUG PageHelper$Navigation - Page at URL http://alb-i986.me/ loaded\r\n\t\tINFO  BasePage - Loading page MyAboutMePage\r\n\t\tDEBUG PageHelper - BEGIN Explicit wait (timeout=15s). Waiting until visibility of [[ChromeDriver: chrome on MAC (e8eac3735de18ef7920ce08755d3f6bf)] -> css selector: #profile_box h1.name]\r\n\t\tDEBUG PageHelper - END Explicit wait: visibility of [[ChromeDriver: chrome on MAC (e8eac3735de18ef7920ce08755d3f6bf)] -> css selector: #profile_box h1.name]\r\n\t\tINFO  CompositeWebTask - END subtask OnMyAboutMePage\r\n\t\tINFO  CompositeWebTask - END subtask Given\r\n\t\tINFO  CompositeWebTask - BEGIN subtask When\r\n\t\tINFO  CompositeWebTask - BEGIN subtask Search\r\n\t\tINFO  BasePage - Loading page SearchResultsPage\r\n\t\tDEBUG PageHelper - BEGIN Explicit wait (timeout=15s). Waiting until visibility of [[ChromeDriver: chrome on MAC (e8eac3735de18ef7920ce08755d3f6bf)] -> css selector: #search-results div]\r\n\t\tDEBUG PageHelper - END Explicit wait: visibility of [[ChromeDriver: chrome on MAC (e8eac3735de18ef7920ce08755d3f6bf)] -> css selector: #search-results div]\r\n\t\tINFO  CompositeWebTask - END subtask Search\r\n\t\tINFO  CompositeWebTask - END subtask When\r\n\t\tINFO  CompositeWebTask - BEGIN subtask Then\r\n\t\tINFO  CompositeWebTask - BEGIN subtask CanCompliment\r\n\t\tINFO  CompositeWebTask - END subtask CanCompliment\r\n\t\tINFO  CompositeWebTask - END subtask Then\r\n\r\n## A glimpse of the internals: UML Sequence Diagrams\r\n\r\n![Open browser SD](uml_diagrams/openBrowser.jpg)\r\n\r\n![Login SD](uml_diagrams/doLoginTask.jpg)\r\n\r\n \r\n## Design goals\r\n\r\n- small, clean, Object-based API ([here, quoting Simon Stewart](http://google-opensource.blogspot.ie/2009/05/introducing-webdriver.html))\r\n- not a wrapper\r\n- high cohesion.\r\n- flexibility\r\n- poetry (to be, as well as to allow for)\r\n\r\n\r\n## Requirements\r\n\r\n- Java 8 (see e.g. [LoadablePage](https://github.com/alb-i986/selenium-tinafw/blob/master/src/main/java/me/alb_i986/selenium/tinafw/ui/LoadablePage.java), which makes use of [static methods in interfaces](http://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html))\r\n- Maven\r\n- Graphviz\r\n\r\nGraphviz is actually optional: it is needed for generating javadocs with pretty cool UML class diagrams (thanks [UMLGraph](http://www.umlgraph.org)!). So you're not gonna need it unless you want to run `mvn site` or `mvn javadoc:javadoc`. \r\n\r\n\r\n## Dependencies\r\n\r\nThe main dependencies are:\r\n- selenium-java\r\n- junit\r\n- log4j\r\n\r\nPlease see the [POM file](pom.xml) for more details.\r\n\r\n\r\n## TODO\r\n\r\n- redesign Config\r\n- cleanup by leveraging Guice\r\n- add `PageComponent` hierarchy\r\n- make it a data-driven framework","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}